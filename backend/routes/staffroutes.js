const express = require("express");
const bcrypt = require("bcryptjs");
const Staff = require("../models/Staff");
const { generateToken, authenticate } = require("../security/auth");
const Student = require("../models/Student");
const router = express.Router();
const nodemailer = require("nodemailer");
router.post("/register", async (req, res) => {
  try {
    const {
      staffId,
      firstName,
      lastName,
      staffType,
      faculty,
      department,
      email,
      position,
    } = req.body;

    // Check if staff already exists
    const existingStaff = await Staff.findOne({ staffId });
    if (existingStaff) {
      return res.status(400).json({ message: "Staff already registered" });
    }

    // Generate a random password
    const autoGeneratedPassword = Math.random().toString(36).slice(-8);
    const hashedPassword = await bcrypt.hash(autoGeneratedPassword, 10);

    // Create and save staff
    const staff = new Staff({
      staffId,
      firstName,
      lastName,
      staffType,
      faculty,
      department,
      email,
      position,
      password: hashedPassword,
    });

    await staff.save();

    
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: "mmyuth2020@gmail.com", 
        pass: "hhbw jyhv pjwl ynve", 
      },
    });

    const mailOptions = {
      from: "mmyuth2020@gmail.com",
      to: email,
      subject: "Staff Registration Successful - Login Details",
      html: `
        <p>Dear ${firstName},</p>
        <p>Your staff account has been successfully registered. Below are your login details:</p>
        <ul>
          <li><strong>Staff ID:</strong> ${staffId}</li>
          <li><strong>Password:</strong> ${autoGeneratedPassword}</li>
        </ul>
        <p>Please change your password after logging in.</p>
        <p>Best regards,<br/>Admin Team</p>
      `,
    };

    await transporter.sendMail(mailOptions);

    res.status(201).json({
      message:
        "Staff successfully registered and verification email sent to staff email.",
    });
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ message: "Server error. Please try again." });
  }
});

router.post("/login", async (req, res) => {
  try {
    const { staffId, password } = req.body;

    const staff = await Staff.findOne({ staffId });
    if (!staff) {
      return res.status(400).json({ message: "Invalid credentials" });
    }

    const isMatch = await bcrypt.compare(password, staff.password);
    if (!isMatch) {
      return res.status(400).json({ message: "Invalid credentials" });
    }

    const token = generateToken({ id: staff._id });

    res.status(200).json({ message: "Login successful", token });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server error" });
  }
});

router.get("/profile", authenticate, async (req, res) => {
  try {
    const staff = await Staff.findById(req.user.id).select("-password");
    res.status(200).json(staff);
  } catch (error) {
    res.status(500).json({ message: "Server error" });
  }
});

router.get("/findallstaff", async (req, res) => {
  try {
    const staff = await Staff.find();
    res.json(staff);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

///////////
router.get("/findstaff", async (req, res) => {
  try {
    const { approvalPath, userId, type } = req.query;

    if (!approvalPath || !userId || !type) {
      return res
        .status(400)
        .json({ message: "Approval path, user ID, and type are required" });
    }

    let user;
    // Find the user based on the type
    if (type === "student") {
      user = await Student.findOne({ studentId: userId });
    } else if (type === "Staff") {
      user = await Staff.findOne({ staffId: userId });
    } else {
      return res.status(400).json({ message: "Invalid user type" });
    }

    if (!user) {
      return res.status(404).json({
        message: type === "student" ? "Student not found" : "Staff not found",
      });
    }

    let staffFilter = {};

    if (approvalPath === "faculty") {
      staffFilter = { faculty: user.faculty };
    } else if (approvalPath === "department") {
      staffFilter = { department: user.department };
    } else if (approvalPath === "both") {
      staffFilter = {
        $or: [
          { faculty: user.faculty },
          { department: user.department },
          { faculty: "Non", department: "Non" },
        ],
      };
    } else {
      return res.status(400).json({ message: "Invalid approval path" });
    }

    const staffList = await Staff.find(staffFilter).select(
      "staffId firstName lastName position department faculty"
    );
    console.log(staffList);
    let filteredStaffList;
    if (type === "staff") {
      filteredStaffList = staffList.filter((staff) => staff.staffId !== userId);
    } else {
      filteredStaffList = staffList;
    }

    res.json(filteredStaffList);
  } catch (err) {
    console.error("Error fetching staff:", err);
    res.status(500).json({ message: "Internal server error" });
  }
});

router.get("/selectstaff", async (req, res) => {
  const { staffType } = req.query;
  const staff = await Staff.find(staffType ? { staffType } : {});
  res.json(staff);
});
router.get("/selectstudent", async (req, res) => {
  const { staffType } = req.query;
  const staff = await Student.find();
  res.json(staff);
});
const sendEmail = async (to, subject, message) => {
  const transporter = nodemailer.createTransport({
    service: "Gmail",
    auth: { user: "mmyuth2020@gmail.com", pass: "hhbw jyhv pjwl ynve" },
  });

  await transporter.sendMail({
    from: "mmyuth2020@gmail.com",
    to,
    subject,
    text: message,
  });
};

router.get("/:id", async (req, res) => {
  try {
    const staff = await Staff.findOne({ staffId: req.params.id });
    if (!staff) return res.status(404).json({ message: "Staff not found" });
    res.json(staff);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
router.put("/:id", async (req, res) => {
  try {
    const updatedStaff = await Staff.findOneAndUpdate(
      { staffId: req.params.id },
      { $set: req.body },
      { new: true }
    );
    if (!updatedStaff)
      return res.status(404).json({ message: "Staff not found" });

    res.json({ message: "Staff updated successfully", staff: updatedStaff });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Delete staff
router.delete("/:id", async (req, res) => {
  try {
    const deletedStaff = await Staff.findOneAndDelete({
      staffId: req.params.id,
    });
    if (!deletedStaff)
      return res.status(404).json({ message: "Staff not found" });

    res.json({ message: "Staff deleted successfully" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Send Email
router.post("/send-email", async (req, res) => {
  try {
    await sendEmail(req.body.to, req.body.subject, req.body.message);
    res.json({ message: "Email sent successfully" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

router.post("/bulk", async (req, res) => {
  const { staffList } = req.body;

  try {
    const savedStaff = await Promise.all(
      staffList.map(async (staffData) => {
        const { staffId, email } = staffData;

        const existingStaffById = await Staff.findOne({ staffId });
        if (existingStaffById) {
          throw new Error(`Staff ID ${staffId} is already registered.`);
        }

        const existingStaffByEmail = await Staff.findOne({ email });
        if (existingStaffByEmail) {
          throw new Error(`Email ${email} is already registered.`);
        }

        const password = Math.random().toString(36).slice(-8);

        const saltRounds = 10;
        const hashedPassword = await bcrypt.hash(password, saltRounds);

        const staff = new Staff({
          staffId,
          firstName: staffData.firstName,
          lastName: staffData.lastName,
          staffType: staffData.staffType,
          faculty: staffData.faculty,
          department: staffData.department,
          email,
          position: staffData.position,
          password: hashedPassword,
          profilePicture: "", 
        });

        const savedStaffMember = await staff.save();

        if (staffData.sendEmail) {
          const message = `Your staff ID is ${savedStaffMember.staffId} and your password is ${password}.`;
          await sendEmail(
            savedStaffMember.email,
            "Staff Registration",
            message
          );
        }

        console.log(
          `Staff ID: ${savedStaffMember.staffId}, Password: ${password}`
        );

        return savedStaffMember;
      })
    );

    res.status(201).json(savedStaff);
  } catch (error) {
    console.error("Error during bulk staff registration:", error);
    res.status(400).json({ message: error.message });
  }
});
module.exports = router;
