import React, { useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import jsPDF from "jspdf";
import "jspdf-autotable";
import QRCode from "qrcode"; 
import "../css/SuccessSubmission.css";
import Navbar from "../components/Navbar";

const SuccessSubmission = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const submissionData = location.state?.submissionData;
  const userType = localStorage.getItem("type");
  useEffect(() => {
    if (!submissionData) {
      alert("No submission data found!");
      navigate("/selectemplate", { replace: true });
    }

    const handlePopState = () => {
      navigate("/selectemplate", { replace: true });
    };

    window.history.pushState(null, null, location.pathname);
    window.addEventListener("popstate", handlePopState);

    return () => {
      window.removeEventListener("popstate", handlePopState);
    };
  }, [navigate, location.pathname, submissionData]);

  const handleDownloadPDF = async () => {
    if (!submissionData) {
      alert("No submission data available for PDF!");
      return;
    }

    const {
      submissionId,
      userId,
      templateName,
      submittedDate,
      questions,
      selectedHierarchy,
    } = submissionData;
    const doc = new jsPDF();

    // Title
    doc.setFont("Helvetica", "bold");
    doc.setFontSize(18);
    doc.text("Acknowledgment Document", 105, 20, null, null, "center");

    // Subtitle
    doc.setFont("Helvetica", "normal");
    doc.setFontSize(12);
    doc.text("Submission Confirmation", 105, 30, null, null, "center");

    // Submission details
    doc.setFontSize(12);
    const details = [
      `User ID: ${userId}`,
      `Submission ID: ${submissionId}`, // Fixed the missing comma
      `Template Name: ${templateName}`,
      `Submitted Date: ${new Date(submittedDate).toLocaleString()}`,
    ];

    let yPosition = 50;
    details.forEach((line) => {
      doc.text(line, 20, yPosition);
      yPosition += 10;
    });

    // Format answers properly
    const formatAnswer = (q) => {
      if (q.answerType.includes("single_date")) {
        return new Date(q.answer).toLocaleDateString();
      }
      if (q.answerType.includes("duration")) {
        return q.answer.start && q.answer.end
          ? `${new Date(q.answer.start).toLocaleDateString()} to ${new Date(
              q.answer.end
            ).toLocaleDateString()}`
          : "N/A";
      }
      return q.answer || "N/A";
    };

    // Table with questions and formatted answers
    const tableData = questions.map((q, index) => [
      index + 1,
      q.question,
      formatAnswer(q),
    ]);

    doc.autoTable({
      startY: yPosition + 10,
      head: [["#", "Question", "Answer"]],
      body: tableData,
      styles: { fontSize: 10, cellPadding: 3 },
      headStyles: {
        fillColor: [22, 160, 133],
        textColor: 255,
        halign: "center",
      },
    });

    // Print hierarchy table with position and staff ID
    if (selectedHierarchy && selectedHierarchy.length > 0) {
      const hierarchyTable = selectedHierarchy.map((level) => [
        `${level.position} (${level.staffId})`,
        "______________________",
      ]);
      const hierarchyStartY = doc.autoTable.previous.finalY + 20;

      doc.autoTable({
        startY: hierarchyStartY,
        head: [["Hierarchy Level (Position & Staff ID)", "Approval Signature"]],
        body: hierarchyTable,
        styles: { fontSize: 10, cellPadding: 3 },
        headStyles: {
          fillColor: [100, 100, 100],
          textColor: 255,
          halign: "center",
        },
      });
    }

    // Signature Placeholder
    const finalY = doc.autoTable.previous.finalY + 20;
    doc.setFontSize(12);
    doc.text("Signature: ________________________", 20, finalY);

    // Footer
    const pageHeight = doc.internal.pageSize.height;
    doc.setFontSize(10);
    doc.text(
      "Thank you for your submission!",
      105,
      pageHeight - 20,
      null,
      null,
      "center"
    );
    doc.text(
      "Generated by SmartApproval",
      105,
      pageHeight - 10,
      null,
      null,
      "center"
    );

    // Generate QR Code for submission link
    const qrCodeData = `/verify/${submissionId}`;
    const qrCodeUrl = await QRCode.toDataURL(qrCodeData); // Generates QR Code as DataURL

    // Add QR Code to PDF
    doc.addImage(qrCodeUrl, "PNG", 150, pageHeight - 50, 40, 40); // Position and size for QR code

    // Save PDF
    doc.save(`Acknowledgment.pdf`);
  };

  return (
    <>
      <Navbar />
      <div className="success-submission-container">
        <h1 className="success-title">ðŸŽ‰ Congratulations! ðŸŽ‰</h1>
        <p className="success-message">
          Your submission was successful! We appreciate your input.
        </p>

        <div className="success-details">
          <h2>Submission Details</h2>
          <p>
            <strong>User ID:</strong> {submissionData?.userId}
          </p>
          <p>
            <strong>Submission ID:</strong> {submissionData?.submissionId}
          </p>
          <p>
            <strong>Template Name:</strong> {submissionData?.templateName}
          </p>
          <p>
            <strong>Submitted Date:</strong>{" "}
            {new Date(submissionData?.submittedDate).toLocaleString()}
          </p>
        </div>

        <div className="success-actions">
          <button className="download-button" onClick={handleDownloadPDF}>
            ðŸ“„ Download Acknowledgment PDF
          </button>
          <button
            className="new-submission-button"
            onClick={() => navigate("/selectemplate")}
          >
            ðŸ”„ Make a New Submission
          </button>
          <button
            className="home-button"
            onClick={() => {
              if (userType === "staff") {
                navigate("/staffdashboard");
              } else if (userType === "student") {
                navigate("/studentdashboard");
              } else {
                navigate("/selectemplate");
              }
            }}
          >
            Home
          </button>
        </div>
      </div>
    </>
  );
};

export default SuccessSubmission;
